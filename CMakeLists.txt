CMAKE_MINIMUM_REQUIRED(VERSION 3.5)

IF(UNIT_TEST_LOCAL)
    SET(PRJ_NAME_SUFFIX "-local_test")
ELSEIF(UNIT_TEST_RTOS_LOCAL)
    SET(PRJ_NAME_SUFFIX "-rtos_local_test")
ELSEIF(UNIT_TEST_DRIVERS)
    SET(PRJ_NAME_SUFFIX "-driver_test")
ENDIF()

SET(PRJ_NAME "PRJ_NAME_TO_RENAME${PRJ_NAME_SUFFIX}")
PROJECT(${PRJ_NAME})

ENABLE_LANGUAGE(ASM)

SET(ROOT_DIR ${CMAKE_SOURCE_DIR})
SET(PRJ_NAME ${CMAKE_PROJECT_NAME})

# Generate compilation database
SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Set cmake module path to reach cmake directory
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${ROOT_DIR}/cmake")

IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -gdwarf-4 -g3")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -gdwarf-4 -g3")
    ADD_DEFINITIONS(-DDEBUG)
ENDIF()

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
SET(CMAKE_CXX_STANDARD 17)

# Put the binary file into bin directory
SET(EXECUTABLE_OUTPUT_PATH "${ROOT_DIR}/bin")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${EXECUTABLE_OUTPUT_PATH})

# As we are cross compiling then set the root path to path of this projectk
SET(CMAKE_FIND_ROOT_PATH ${ROOT_DIR})

SET(DATA_STRUCTS ${ROOT_DIR}/app/data_structs)
SET(OS_STRUCTS ${ROOT_DIR}/app/os_structs)
SET(CHAR_DRIVERS ${ROOT_DIR}/app/drivers/char_drivers)
SET(CHIP_INTERNAL_DRIVERS ${ROOT_DIR}/app/drivers/chip_internal)
SET(ONBOARD_DEVICES_DRIVERS ${ROOT_DIR}/app/drivers/onboard_devices)
SET(INTERNAL_OS_API ${ROOT_DIR}/app/internal_api/os)
SET(INTERNAL_NON_OS_API ${ROOT_DIR}/app/internal_api/non-os)
SET(TASKS ${ROOT_DIR}/app/tasks)
SET(DRIVER_TESTS ${ROOT_DIR}/tests/drivers)
SET(CHIP_INTERNAL_MOCKS ${ROOT_DIR}/tests/mocks/chip_internal)
SET(ONBOARD_DEVICES_MOCKS ${ROOT_DIR}/tests/mocks/onboard_devices)
SET(UNIT_LOCAL_TESTS ${ROOT_DIR}/tests/unit_local)
SET(UNIT_LOCAL_RTOS_TESTS ${ROOT_DIR}/tests/unit_rtos_local)
SET(GENERATED_CODE ${ROOT_DIR}/generated)
SET(EXT_DEPS ${ROOT_DIR}/ext_deps)

IF(UNIT_TEST_LOCAL OR UNIT_TEST_RTOS_LOCAL OR UNIT_TEST_DRIVERS)
    FIND_PACKAGE(Unity REQUIRED)
    INCLUDE_DIRECTORIES(${Unity_INCLUDE_DIRS})
    ADD_EXECUTABLE(${PRJ_NAME} ${Unity_SOURCES})
ENDIF()

IF(UNIT_TEST_LOCAL)

    INCLUDE_DIRECTORIES(${ROOT_DIR}/app ${EXT_DEPS})

    FILE(GLOB SOURCES "${UNIT_LOCAL_TESTS}/*.c*")

    ADD_EXECUTABLE(${PRJ_NAME} ${SOURCES} ${Unity_SOURCES} ${INTERNAL_NON_OS_API_SOURCES})

    SET_TARGET_PROPERTIES(${PRJ_NAME} PROPERTIES OUTPUT_NAME "${PRJ_NAME}")

    ADD_CUSTOM_TARGET(run-unit-local-tests
        valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ../../bin/${PRJ_NAME}
        )

ELSEIF(UNIT_TEST_RTOS_LOCAL)
    SET(FreeRTOS_PORT Linux)
    SET(FreeRTOS_HEAP_IMPL 3)
    FIND_PACKAGE(FreeRTOS REQUIRED)

    TARGET_LINK_LIBRARIES(${PRJ_NAME} Threads::Threads)
    SET_TARGET_PROPERTIES(${PRJ_NAME} PROPERTIES OUTPUT_NAME "${PRJ_NAME}-rtos_local_test")
ELSE()
    ADD_DEFINITIONS(-DCROSS_COMPILING)
    ADD_DEFINITIONS(-D__FREERTOS__)

    # Set variables used by ObKo-stm32cmake 
    SET(STM32_LINKER_SCRIPT "${GENERATED_CODE}/*.ld")

    FIND_PACKAGE(CMSIS REQUIRED)
    
    MESSAGE(FATAL_ERROR "Define the FreeRTOS_PORT variable and then remove this error message")
    SET(FreeRTOS_PORT ARM_CM_*)
    SET(FreeRTOS_HEAP_IMPL 4)
    FIND_PACKAGE(FreeRTOS COMPONENTS CMSIS REQUIRED)

    FIND_PACKAGE(STM32LL COMPONENTS gpio REQUIRED)
    FIND_PACKAGE(STM32HAL COMPONENTS tim REQUIRED)

    FILE(GLOB GEN_SOURCES ${GENERATED_CODE}/Src/*.c**)
    FILE(GLOB TASKS_SOURCES ${TASKS}/src/*.c**)
    FILE(GLOB CHIP_INTERNAL_DRIVERS_SOURCES ${CHIP_INTERNAL_DRIVERS}/*/src/*.c**)
    FILE(GLOB ONBOARD_DEVICES_DRIVERS_SOURCES ${ONBOARD_DEVICES_DRIVERS}/*/src/*.c**)
    FILE(GLOB OS_SOURCES ${TASKS}/src/*.c**)
    FILE(GLOB INTERNAL_OS_API_SOURCES ${INTERNAL_OS_API}/src/*.c**)

    INCLUDE_DIRECTORIES(${CMSIS_INCLUDE_DIRS} ${FreeRTOS_INCLUDE_DIRS} ${STM32LL_INCLUDE_DIRS} ${STM32HAL_INCLUDE_DIRS}
        ${EXT_DEPS} ${GENERATED_CODE}/Inc ${ROOT_DIR}/app)
    ADD_EXECUTABLE(${PRJ_NAME} ${CMSIS_SOURCES} ${FreeRTOS_SOURCES} ${STM32LL_SOURCES} ${STM32HAL_SOURCES}
        ${GEN_SOURCES} ${TASKS_SOURCES} ${CHIP_INTERNAL_DRIVERS_SOURCES}
        ${ONBOARD_DEVICES_DRIVERS_SOURCES} ${INTERNAL_OS_API_SOURCES} ${INTERNAL_NON_OS_API_SOURCES}
        ${ROOT_DIR}/app/init_app.c ${ROOT_DIR}/app/drivers/init_drivers.c ${ROOT_DIR}/ext_deps/init_ext_deps.c
        )

    STM32_SET_TARGET_PROPERTIES(${PRJ_NAME})
    STM32_ADD_HEX_BIN_TARGETS(${PRJ_NAME})
ENDIF()

# Add "tags" target and make the project depending on this target.
SET_SOURCE_FILES_PROPERTIES(tags PROPERTIES GENERATED true)
ADD_CUSTOM_TARGET(tags
    COMMAND ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .
    WORKING_DIRECTORY ${ROOT_DIR})
ADD_DEPENDENCIES(${PRJ_NAME} tags)
